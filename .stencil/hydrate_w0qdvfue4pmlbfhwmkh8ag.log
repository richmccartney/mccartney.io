import { registerInstance as __stencil_registerInstance, getElement as __stencil_getElement } from "@stencil/core";
export class ContextConsumer {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
        this.context = {};
        this.renderer = () => null;
    }
    connectedCallback() {
        if (this.subscribe != null) {
            this.unsubscribe = this.subscribe(this.el, 'context');
        }
    }
    disconnectedCallback() {
        if (this.unsubscribe != null) {
            this.unsubscribe();
        }
    }
    render() {
        return this.renderer(Object.assign({}, this.context));
    }
    get el() { return __stencil_getElement(this); }
    static get cmpMeta() { return {
        "$flags$": 0,
        "$tagName$": "context-consumer",
        "$members$": {
            "context": [16],
            "renderer": [16],
            "subscribe": [16],
            "unsubscribe": [32]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}
