import { registerInstance as __stencil_registerInstance, getElement as __stencil_getElement } from "@stencil/core";
import ActiveRouter from '../../global/active-router';
export class StencilRouterPrompt {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
        this.when = true;
        this.message = '';
    }
    enable(message) {
        if (this.unblock) {
            this.unblock();
        }
        if (this.history) {
            this.unblock = this.history.block(message);
        }
    }
    disable() {
        if (this.unblock) {
            this.unblock();
            this.unblock = undefined;
        }
    }
    componentWillLoad() {
        if (this.when) {
            this.enable(this.message);
        }
    }
    updateMessage(newMessage, prevMessage) {
        if (this.when) {
            if (!this.when || prevMessage !== newMessage) {
                this.enable(this.message);
            }
        }
        else {
            this.disable();
        }
    }
    componentDidUnload() {
        this.disable();
    }
    render() {
        return null;
    }
    get el() { return __stencil_getElement(this); }
    static get watchers() { return {
        "message": ["updateMessage"],
        "when": ["updateMessage"]
    }; }
    static get cmpMeta() { return {
        "$flags$": 0,
        "$tagName$": "stencil-router-prompt",
        "$members$": {
            "when": [4],
            "message": [1],
            "history": [16],
            "unblock": [32]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}
ActiveRouter.injectProps(StencilRouterPrompt, [
    'history',
]);
